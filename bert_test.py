# -*- coding: utf-8 -*-
"""bert_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYIaeuuvBqEHIOWD46gAgjq0sxzyM2Wa
"""

import os
import random
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from torch.optim import AdamW
from transformers import BertTokenizer, BertModel, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split as tts
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from typing import Union, List
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

import warnings
warnings.filterwarnings('ignore')

plt.rcParams['figure.figsize'] = (8,5)
plt.rcParams['font.size'] = 14

"""## EDA"""

def load_data(dataFile:str) -> Union[List, List]:
    df = pd.read_csv(dataFile)
    texts = df['tweet_text'].tolist()
    labels = df['cyberbullying_type'].tolist()
    return texts, labels

len(texts), len(labels)

dataFile = 'cyberbullying_tweets.csv'
texts, labels = load_data(dataFile)

labEncoder = LabelEncoder()
labEncoder.fit(labels)
labelsEncoded = labEncoder.transform(labels)

df = pd.DataFrame({'text':texts, 'labels':labels})
df

any(df.isna().sum())

df.info()

plt.figure(figsize=(12, 7))
sb.countplot(data=df, x='labels')
plt.title("Label Distribution")
plt.show()

df.describe()

df['length'] = df['text'].str.len()
sb.boxplot(data=df, y='length')
plt.title("Length of Tweets")
plt.show()

# le = LabelEncoder()
# df['text'] = le.fit_transform(df['text'])
# df['labels'] = le.fit_transform(df['labels'])
# df.info()

# df.value_counts()

"""## Reduce the data"""

# IQR = 180.000000 - 78.000000
# lowerB = 78 - 1.5*IQR
# upperB = 180 + 1.5*IQR

df = df[((df['length'] > 10)	& (df['length'] < 30))]
df.info()
sb.boxplot(df['length'])

def word_count(x):
    return len(x.split())

df['word_count'] = df['text'].apply(word_count)

sb.boxplot(data=df, y='word_count')
plt.title("Word Count in Tweets")
plt.show()

IQR = 180.000000 - 78.000000
lowerB = 78 - 1.5*IQR
upperB = 180 + 1.5*IQR

"""## Preprocessing (dataset building)"""

class TextClassificationDataset(Dataset):

    def __init__(self, texts, labels, tokenizer, max_length):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer(text, return_tensors='pt', max_length=self.max_length, padding='max_length', truncation=True)
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'label': torch.tensor(label)
        }

"""## Modelling"""

class BERTClassifier(nn.Module):
    def __init__(self, bert_model_name, num_classes):
        super(BERTClassifier, self).__init__()
        self.bert = BertModel.from_pretrained(bert_model_name)
        self.dropout = nn.Dropout(0.1)
        self.fc = nn.Linear(self.bert.config.hidden_size, num_classes)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        x = self.dropout(pooled_output)
        logits = self.fc(x)
        return logits

def train(model, data_loader, optimizer, scheduler, device):
    model.train()
    for batch in data_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['label'].to(device)
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        loss = nn.CrossEntropyLoss()(outputs, labels)
        loss.backward()
        optimizer.step()
        scheduler.step()

def evaluate(model, data_loader, device):
    model.eval()
    predictions = list()
    actual = list()
    with torch.no_grad():
        for batch in data_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
            predictions.extend(preds.cpu().tolist())
            actual.extend(labels.cpu().tolist())
    return accuracy_score(y_true=actual, y_pred=predictions), classification_report(y_true=actual, y_pred=predictions)

def predict_class(text, model, tokenizer, device, classes, max_length=128):
    model.eval()
    encoding = tokenizer(text, return_tensors='pt', max_length=max_length, padding='max_length', truncation=True)
    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)

    with torch.no_grad():
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        _, preds = torch.max(outputs, dim=1)

    return classes[preds.item()]

"""using the best pre-defined parameters"""

# bert_model_name = 'bert-base-uncased'
# num_classes = 6
# max_length = 128
# batch_size = 32
# num_epochs = 5
# learning_rate = 2e-5
# fine tuned hyperparameters

bert_model_name = 'bert-base-uncased'
num_classes = 6
max_length = 128
batch_size = 16
num_epochs = 3
learning_rate = 5e-05

train_texts, val_texts, train_labels, val_labels = tts(texts, labelsEncoded, test_size=0.2, random_state=42)
len(train_texts), len(val_texts), len(train_labels), len(val_labels)

tokenizer = BertTokenizer.from_pretrained(bert_model_name)

train_dataset = TextClassificationDataset(train_texts, train_labels, tokenizer=tokenizer, max_length=max_length)
val_dataset = TextClassificationDataset(val_texts, val_labels, tokenizer=tokenizer, max_length=max_length)

train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_dataloader = DataLoader(val_dataset, batch_size=batch_size)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = BERTClassifier(bert_model_name, num_classes).to(device)

optimizer = AdamW(model.parameters(), lr=learning_rate)
total_steps = len(train_dataloader) * num_epochs
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)

"""## Evaluation metrics"""

for epoch in range(num_epochs):
    print(f"Epoch {epoch+1}/{num_epochs}")
    train(model, train_dataloader, optimizer, scheduler, device)
    accuracy, report = evaluate(model, val_dataloader, device)
    print(f"Validation Accuracy: {accuracy:.4f}")
    print(report)

"""##Visualization"""

accuracies = []

for epoch in range(num_epochs):
    print(f"Epoch {epoch+1}/{num_epochs}")
    train(model, train_dataloader, optimizer, scheduler, device)
    accuracy, report = evaluate(model, val_dataloader, device)
    accuracies.append(accuracy)
    reports.append(report)
    print(f"Validation Accuracy: {accuracy:.4f}")
    print(report)

# Plot validation accuracy per epoch
plt.figure(figsize=(8, 5))
plt.plot(range(1, num_epochs + 1), accuracies, marker='o')
plt.title("Validation Accuracy per Epoch")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.grid(True)
plt.tight_layout()
plt.show()

def model_predictions(data_loader, model, device):
    model.eval()
    predictions = list()
    with torch.no_grad():
        for batch in data_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
            predictions.extend(preds.cpu().tolist())
    return predictions

# Extract metrics from last classification report
report_dict = classification_report(val_labels,
                                     model_predictions(val_dataloader, model, device),
                                     output_dict=True)

df_report = pd.DataFrame(report_dict).transpose()
df_report = df_report.drop(["accuracy", "macro avg", "weighted avg"], errors='ignore')

# Plot classification report as bar chart
plt.figure(figsize=(10, 6))
df_report[['precision', 'recall', 'f1-score']].plot(kind='bar')
plt.title("Classification Metrics per Class")
plt.xlabel("Class")
plt.ylabel("Score")
plt.ylim(0, 1.05)
plt.legend(loc='lower right')
plt.grid(axis='y')
plt.tight_layout()
plt.show()